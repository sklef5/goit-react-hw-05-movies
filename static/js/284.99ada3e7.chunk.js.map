{"version":3,"file":"static/js/284.99ada3e7.chunk.js","mappings":"8LAsCA,UAlCe,WACb,OAA4BA,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAChB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQ,UAAWL,GAChBM,MAAK,SAAAC,GAAG,OAAIJ,EAAWI,EAAIC,QAAnB,IACRC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAhB,GACX,GAAE,CAACX,EAAQC,KAGV,8BACsB,IAAnBE,EAAQW,QACP,wBACGX,EAAQY,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,GAApC,OACX,0BACGH,EAAeI,cACd,gBACEC,IAAG,wCAAmCL,EAAeI,aACrDE,IAAKL,KAGT,oCAAYA,MACZ,uBAAIC,MARGC,EADE,OAcf,2DAIP,C,uKClCKI,EAAU,mCAEHC,EACA,sBADAA,EAEC,gBAFDA,EAGK,UAKlBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAalB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQD,EAAAA,EAAAA,IACND,EAAgB,CACnBG,OAAQ,CACNC,QAASL,EACTM,KAAM,KAGTtB,MAAK,SAAAC,GAAG,OAAIA,EAAIsB,KAAKrB,OAAb,IARN,0GAWA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,iFACQP,EAAAA,EAAAA,IACND,EAAiB,CACpBG,OAAQ,CACNC,QAASL,EACTS,MAAAA,KAGHzB,MAAK,SAAAC,GAAG,OAAIA,EAAIsB,KAAKrB,OAAb,IARN,0GAWA,SAAewB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBd,GAAzB,iFACQM,EAAAA,EAAAA,IAAA,UACHD,GADG,OACmBL,GAAM,CAClCQ,OAAQ,CACNC,QAASL,KAGZhB,MAAK,SAAAC,GAAG,OAAIA,EAAIsB,IAAR,IAPN,0GASA,SAAexB,EAAtB,iDAAO,OAAP,oBAAO,WAAuB4B,EAAMf,GAA7B,iFACQM,EAAAA,EAAAA,IAAA,UACHD,GADG,OACmBL,EADnB,YACyBe,GAAQ,CAC1CP,OAAQ,CACNC,QAASL,KAGZhB,MAAK,SAAAC,GAAG,OAAIA,EAAIsB,IAAR,IAPN,0G","sources":["components/ReviewList/ReviewList.jsx","components/service/API.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getCast } from '../service/API';\n\nconst Review = () => {\n  const { review, movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getCast('reviews', movieId)\n      .then(res => setReviews(res.results))\n      .catch(e => console.log(e));\n  }, [review, movieId]);\n\n  return (\n    <>\n      {reviews.length !== 0 ? (\n        <ul>\n          {reviews.map(({ author_details, author, content, id }) => (\n            <li key={id}>\n              {author_details.avatar_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w45${author_details.avatar_path}`}\n                  alt={author}\n                />\n              )}\n              <p>Author: {author}</p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews for this movie yet.</p>\n      )}\n    </>\n  );\n};\n\nexport default Review;\n","import axios from 'axios';\n\nconst API_KEY = 'c0374a2201c609381a9f6560041cb206';\n\nexport const PATH = {\n  GET_TREND: '/trending/movie/day',\n  FIND_MOVIE: '/search/movie',\n  GET_INFO_MOVIE: '/movie/',\n  GET_ACTORS: '/movies/get-movie-credits',\n  GET_REVIEW: '/movies/get-movie-reviews',\n};\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const searchMovieApi = (path, page) => {\n  return axios\n    .get(path, {\n      params: {\n        api_key: API_KEY,\n        page: page,\n      },\n    })\n    .then(res => res.data);\n};\n\nexport async function getTrends() {\n  return await axios\n    .get(PATH.GET_TREND, {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    })\n    .then(res => res.data.results);\n}\n\nexport async function findMovies(query) {\n  return await axios\n    .get(PATH.FIND_MOVIE, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    })\n    .then(res => res.data.results);\n}\n\nexport async function findMovie(id) {\n  return await axios\n    .get(`${PATH.GET_INFO_MOVIE}${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(res => res.data);\n}\nexport async function getCast(path, id) {\n  return await axios\n    .get(`${PATH.GET_INFO_MOVIE}${id}/${path}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(res => res.data);\n}"],"names":["useParams","review","movieId","useState","reviews","setReviews","useEffect","getCast","then","res","results","catch","e","console","log","length","map","author_details","author","content","id","avatar_path","src","alt","API_KEY","PATH","axios","getTrends","params","api_key","page","data","findMovies","query","findMovie","path"],"sourceRoot":""}